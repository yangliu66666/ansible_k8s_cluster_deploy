---
# tasks file for k8s-etcd

- name: 获取项目根目录
  shell: pwd | sed 's/roles.*//'
  connection: local
  register: project_dir
- debug: msg={{ project_dir.stdout }}

- name: 创建etcd工作目录
  file: 
    path: "{{ etcd_dir }}/{{ item }}"
    state: directory
  with_items:
    - bin
    - cfg
    - ssl

- name: 创建临时工作目录
  file:
    path: "{{ tmp_dir }}"
    state: directory

- name: 分发并解压etcd二进制文件
  unarchive:
    src: "{{ project_dir.stdout }}/binary_pkg/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    dest: "{{ tmp_dir }}"

- name: 移动etcd可执行程序到工作目录
  shell: mv {{ tmp_dir }}/etcd-{{ etcd_version }}-linux-amd64/{{ item }} {{ etcd_dir }}/bin/{{ item }}
  with_items:
    - etcd
    - etcdctl

- name: 分发ssl证书
  copy: src={{ project_dir.stdout }}/ssl/etcd/{{ item }}  dest={{ etcd_dir }}/ssl/{{ item }}
  with_items:
    - etcd-ca.pem
    - etcd-server.pem
    - etcd-server-key.pem

- name: 分发etcd配置文件
  template: src=etcd.conf.j2 dest={{ etcd_dir }}/cfg/etcd.conf

- name: 分发etcd服务启动配置文件
  template: src=etcd.service.j2 dest=/usr/lib/systemd/system/etcd.service

- name: 启动etcd服务
  systemd: 
    name: etcd 
    state: restarted 
    enabled: True 
    daemon_reload: yes

- name: 检查etcd集群状态
  shell: "{{ etcd_dir }}/bin/etcdctl --ca-file={{ etcd_dir }}/ssl/etcd-ca.pem --cert-file={{ etcd_dir }}/ssl/etcd-server.pem --key-file={{ etcd_dir }}/ssl/etcd-server-key.pem --endpoints={% for host in groups['etcd'] %}{% if loop.last %}https://{{ host }}:2379{% else %}https://{{ host }}:2379,{% endif %}{% endfor%} cluster-health"
  register: etcd_status
- debug: msg={{ etcd_status.stdout_lines }}

